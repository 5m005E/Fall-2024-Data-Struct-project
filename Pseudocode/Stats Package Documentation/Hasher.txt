java util imports:
- ArrayList
- HashMap
- List

local package imports:
- Trie (triePackage)

////\\\\////\\\\////\\\\////\\\\////\\\\////\\\\

CLASS CONSTRUCTOR:
    inits:
    - vocab map as new HashMap
    - probability map as new HashMap
    - vocab trie as new trie object

////\\\\////\\\\////\\\\////\\\\////\\\\////\\\\

ACCESSOR METHODS:
    function getVocabMap():
        returns the vocab map.

    function getProbabilityMap():
        returns the probability map.

    function relevantHash():
        Init storage hash map.
        Init list of strings by calling the find() function
        from the vocab trie with parameters input letter and its
        position.

        for each string in the storage list;
            Init delta (displacement) through calling 'relativePos()'
            with parameters of input word position and the current
            string from the list.

            if delta is 1, the word has no correpsondence and can
            therefore be skipped.

            Init tunable parameter to scale delta.
            Init adjusted probability as the value of the original
            probability associated with the current string times
            1 minus delta.

            Put the current string as a key and its corresponding
            adjusted probability into the storage hash map.

        return the storage hash map.

MODIFIER METHDOS:
    function addVocab():
        put the vocab word and its corresponding line
        (from the "words.txt" file containing all vocab
        words) into the vocab map.

    function addProbability():
        put a word from an old message into the probability
        map, with its corresponding value being the ratio of
        that word's occurrences to the total word count in the
        old messages.

function addVocabTrie():
    store vocab trie in the hasher.

function addCorrespondence():
    Init string position as 0.

    If the length of the input line is less than 1;
        normalize the position by casting the input position
        parameter over the length of the input line minus 1.

    merge (update) the correspondence matrix with the relative
    position of the word.

UTILITY METHODS:
    function hashOldMessages():
        init:
            total word count as the size
            of the "words" string array list
            parameter.

        for each string in the key set from the vocab map;
        init total occurrences of a given word at 0.
            for each string in the "words" string ArrayList
            parameter; if said string from the array list
            is that from the vocab map, add an occurrence.
        call 'addProbability' with parameters consisting of 
        the key string and a double representing the ratio of
        occurrences over total words in the messages.

    function relativePos():
        if the correspondence matrix doesn't contain the target
        string as a key; return 1.0 as the maximum penalty for
        missing correspondence.

        Init target relative position as the value corresponding
        to the key as the target string, and the displacement as
        the absolute value of the target relative position minus
        the position of the input 'new message' word.

        return the direct displacement as delta normalized
        by the input parameters.