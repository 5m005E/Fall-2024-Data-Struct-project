java util imports:
- ArrayList
- List
- Map

////\\\\////\\\\////\\\\////\\\\////\\\\////\\\\

CLASS CONSTRUCTOR:
    inits:
    - root as a new trie node
    - resultant array list for search-based retrieval.

////\\\\////\\\\////\\\\////\\\\////\\\\////\\\\

ACCESSOR METHODS:
    function getRoot():
        returns the root of the trie.
    
    function find():
        if the target character is a null character or the target
        position is less than 0; throw an IllegalArgumentException
        (invalid input).

        refresh resultant array list.
        init StringBuilder object
        call 'collect()' function with parameters the StringBuilder
        object, the root node, the current index as 0, target character,
        and target position.

        return the resultant list.

    function collect():
        Base case: if the current node is null; return.

        if the current index is the target position; if the current node's
        children contains a key equal to the target character; append the
        target chararcter to the string builder (current string). Collect
        all current search options via call to 'collectAll()' function with
        parameters value of the key equal to the target character, and the
        StringBuilder (current string). If the current string's length is
        greater than 0; delete the last character from the current string
        and return.

        for each entry in the current node's children entry set; append the
        key corresponding the current entry to the current string. Recursively
        call this function with parameters current string, current entry's
        value, the next index, the target character, and the target position.
        If the current string's length is greater than 0; delete the last
        character from the current string.

    function collectAll():
        if the current node is null; return.

        if the current node is the end of the path, add the current string to
        the resultant list.

        for each entry in the current node's child entry set; init the current
        child node as the current entry's value. Append the current entry's key
        to the current string. Recursively call this function with parameters
        child node and the current string.

        if the current string's length is greater than 0; delete the last character
        from the current string.

MODIFIER METHODS:
    function insert():
        Init 'current' trie node as the root.

        for each character in the character
        array parameter; give the current trie
        node a child if it has none with parameters
        consisting of the current character and a
        new trie node. Point the current node to
        the child corresponding to the current
        character.

        set the current node's "path end" boolean
        value to 'true.'

UTILITY METHODS:
    function contains():
        Init the current node as the root, and a char array
        as the input word to char array. For each character
        in the char array; step the current node to the child
        corresponding to the current character. If the current
        node is null, return false.

        return the path-end predicate after a successful full
        iteration through the trie (true).

    function search():
        Init 'current' trie node as the root, and
        a character array for the characters is the
        'word' parameter.

        for each character in the character array;
        set the current node to its child corresponding
        to the current character. If the current node is
        null, return 'false.'

        return the most-true boolean value of the
        'isPrefix' parameter, or the current node's
        status as a leaf node.

PREDICATE METHODS:
    function isEmpty():
        return whether the root node is a leaf.